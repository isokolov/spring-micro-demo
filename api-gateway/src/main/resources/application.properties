# считывание настроек с помощью spring cloud config
spring.config.import=configserver:http://localhost:8888

# эту настройку лучше не выносить вне приложения, иначе приложение сначала запустится с другим портом, а потом только начнет считывать настройки spring cloud config
server.port=8765

# эту настройку лучше не выносить из приложения, иначе в spring cloud название может быть UNKNOWN
# id приложения - желательно указывать всегда в микросервисных приложениях
spring.application.name=api-gateway

# включаем actuator
management.endpoint.gateway.enabled=true
# какие endpoints хотим включить
management.endpoints.web.exposure.include=*

# url, куда будет происходить регистрация микросервисов
# eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# более короткое отображение логов
#logging.pattern.console=%C{1.} [%-5level] %d{HH:mm:ss} - %msg%n

# для корректной работы api gateway
# spring.cloud.gateway.discovery.locator.enabled=true
# spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# можно вручную перенаправлять запрос на нужный микросервис
#spring.cloud.gateway.routes[0].id=test
## lb - load balancer, earlier localhost:8082/eclient/test
#spring.cloud.gateway.routes[0].uri=lb://eclient
#spring.cloud.gateway.routes[0].predicates[0]=Path=/main/test
#spring.cloud.gateway.routes[0].predicates[1]=Method=GET
#
#spring.cloud.gateway.routes[1].id=name
## lb - load balancer, now localhost:8082/new/name
#spring.cloud.gateway.routes[1].uri=lb://eclient2
#spring.cloud.gateway.routes[1].predicates[0]=Path=/new/name
#spring.cloud.gateway.routes[1].predicates[1]=Method=GET
